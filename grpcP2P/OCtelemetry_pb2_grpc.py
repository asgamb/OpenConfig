# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import OCtelemetry_pb2 as OCtelemetry__pb2


class OCTelemetryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.telemetrySubscribe = channel.unary_unary(
                '/Telemetry.OCTelemetry/telemetrySubscribe',
                request_serializer=OCtelemetry__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=OCtelemetry__pb2.SubscriptionResponse.FromString,
                )
        self.cancelTelemetrySubscription = channel.unary_unary(
                '/Telemetry.OCTelemetry/cancelTelemetrySubscription',
                request_serializer=OCtelemetry__pb2.SubscriptionId.SerializeToString,
                response_deserializer=OCtelemetry__pb2.NoMessage.FromString,
                )


class OCTelemetryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def telemetrySubscribe(self, request, context):
        """Request an inline subscription for data at the specified path
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancelTelemetrySubscription(self, request, context):
        """Terminates and removes an existing telemetry subscription
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OCTelemetryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'telemetrySubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.telemetrySubscribe,
                    request_deserializer=OCtelemetry__pb2.SubscriptionRequest.FromString,
                    response_serializer=OCtelemetry__pb2.SubscriptionResponse.SerializeToString,
            ),
            'cancelTelemetrySubscription': grpc.unary_unary_rpc_method_handler(
                    servicer.cancelTelemetrySubscription,
                    request_deserializer=OCtelemetry__pb2.SubscriptionId.FromString,
                    response_serializer=OCtelemetry__pb2.NoMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Telemetry.OCTelemetry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OCTelemetry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def telemetrySubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Telemetry.OCTelemetry/telemetrySubscribe',
            OCtelemetry__pb2.SubscriptionRequest.SerializeToString,
            OCtelemetry__pb2.SubscriptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancelTelemetrySubscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Telemetry.OCTelemetry/cancelTelemetrySubscription',
            OCtelemetry__pb2.SubscriptionId.SerializeToString,
            OCtelemetry__pb2.NoMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OCReplyStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamData = channel.stream_unary(
                '/Telemetry.OCReply/StreamData',
                request_serializer=OCtelemetry__pb2.TelemetryData.SerializeToString,
                response_deserializer=OCtelemetry__pb2.NoMessage.FromString,
                )


class OCReplyServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OCReplyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamData': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamData,
                    request_deserializer=OCtelemetry__pb2.TelemetryData.FromString,
                    response_serializer=OCtelemetry__pb2.NoMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Telemetry.OCReply', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OCReply(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Telemetry.OCReply/StreamData',
            OCtelemetry__pb2.TelemetryData.SerializeToString,
            OCtelemetry__pb2.NoMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
