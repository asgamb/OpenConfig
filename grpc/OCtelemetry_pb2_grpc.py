# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import OCtelemetry_pb2 as OCtelemetry__pb2


class OCTelemetryStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.telemetrySubscribe = channel.unary_unary(
        '/Telemetry.OCTelemetry/telemetrySubscribe',
        request_serializer=OCtelemetry__pb2.SubscriptionRequest.SerializeToString,
        response_deserializer=OCtelemetry__pb2.SubscriptionResponse.FromString,
        )
    self.cancelTelemetrySubscription = channel.unary_unary(
        '/Telemetry.OCTelemetry/cancelTelemetrySubscription',
        request_serializer=OCtelemetry__pb2.SubscriptionId.SerializeToString,
        response_deserializer=OCtelemetry__pb2.NoMessage.FromString,
        )


class OCTelemetryServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def telemetrySubscribe(self, request, context):
    """Request an inline subscription for data at the specified path
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cancelTelemetrySubscription(self, request, context):
    """Terminates and removes an existing telemetry subscription
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OCTelemetryServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'telemetrySubscribe': grpc.unary_unary_rpc_method_handler(
          servicer.telemetrySubscribe,
          request_deserializer=OCtelemetry__pb2.SubscriptionRequest.FromString,
          response_serializer=OCtelemetry__pb2.SubscriptionResponse.SerializeToString,
      ),
      'cancelTelemetrySubscription': grpc.unary_unary_rpc_method_handler(
          servicer.cancelTelemetrySubscription,
          request_deserializer=OCtelemetry__pb2.SubscriptionId.FromString,
          response_serializer=OCtelemetry__pb2.NoMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Telemetry.OCTelemetry', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OCReplyStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StreamData = channel.stream_unary(
        '/Telemetry.OCReply/StreamData',
        request_serializer=OCtelemetry__pb2.TelemetryData.SerializeToString,
        response_deserializer=OCtelemetry__pb2.NoMessage.FromString,
        )


class OCReplyServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def StreamData(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OCReplyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StreamData': grpc.stream_unary_rpc_method_handler(
          servicer.StreamData,
          request_deserializer=OCtelemetry__pb2.TelemetryData.FromString,
          response_serializer=OCtelemetry__pb2.NoMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Telemetry.OCReply', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
